#pragma checksum "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "233311c9a08a5aa1fe14a68608186bfa142e583f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Orders_GetChallangers), @"mvc.1.0.view", @"/Views/Orders/GetChallangers.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\learning\hackaton\Views\_ViewImports.cshtml"
using hackaton;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\learning\hackaton\Views\_ViewImports.cshtml"
using hackaton.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
using System.Security.Cryptography;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
using System.Text;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"233311c9a08a5aa1fe14a68608186bfa142e583f", @"/Views/Orders/GetChallangers.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aaa3d7b29c774f988e508fb7e6e0ffbe85a0df62", @"/Views/_ViewImports.cshtml")]
    public class Views_Orders_GetChallangers : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<hackaton.Models.user>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
  
    ViewBag.Title = "Претенденты";
    string get_hash(string name)
    {
        var tmpsrc = ASCIIEncoding.ASCII.GetBytes(name);
        var tmphash = new MD5CryptoServiceProvider().ComputeHash(tmpsrc);
        Int32 int_hash = Math.Abs(BitConverter.ToInt32(tmphash) % 23) + 1;
        string name_hash = "(" + int_hash.ToString() + ").jpg";
        return name_hash;
    }

#line default
#line hidden
#nullable disable
            WriteLiteral("<div class=\"row\">\r\n    <div class=\"col-12\">\r\n        <h3 class=\"pl-5\">Претенденты на выполнение заказа</h3>\r\n    </div>\r\n</div>\r\n<div class=\"row\">\r\n");
#nullable restore
#line 21 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
     foreach (var item in Model)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <div class=\"col-3\">\r\n            <div class=\"d-flex flex-column m-2\" style=\"border:1px solid black; border-radius:2px;\">\r\n                <img class=\"pt-2 pl-2 pr-2\" style=\"border-radius:2px\"");
            BeginWriteAttribute("src", " src=\"", 874, "\"", 917, 2);
            WriteAttributeValue("", 880, "/images/lazy/", 880, 13, true);
#nullable restore
#line 25 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
WriteAttributeValue("", 893, get_hash(item.username), 893, 24, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" width=\"100%\" />\r\n                <p style=\"margin-bottom:0px\" class=\"pl-2 pt-2\">\r\n                    Никнейм: ");
#nullable restore
#line 27 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
                        Write(item.username);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </p>\r\n                <p style=\"margin-bottom:0px\" class=\"pl-2 pr-2\">email: ");
#nullable restore
#line 29 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
                                                                 Write(item.email);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n                <p style=\"margin-bottom:0px\" class=\"pl-2 pr-2\">Имя: ");
#nullable restore
#line 30 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
                                                               Write(item.firstname);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n                <p style=\"margin-bottom:0px\" class=\"pl-2 pr-2\">Фамилия: ");
#nullable restore
#line 31 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
                                                                   Write(item.secondname);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n                <button");
            BeginWriteAttribute("id", " id=\"", 1361, "\"", 1379, 1);
#nullable restore
#line 32 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
WriteAttributeValue("", 1366, item.user_id, 1366, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            BeginWriteAttribute("value", " value=\"", 1380, "\"", 1405, 1);
#nullable restore
#line 32 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
WriteAttributeValue("", 1388, ViewBag.id_order, 1388, 17, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" onclick=""acceptSubscription(this)"" class=""btn btn-success ml-2 mr-2 mb-1"">
                    Принять заявку
                </button>
                <button class=""btn btn-primary ml-2 mr-2 mb-1"">
                    Написать сообщение
                </button>
            </div>
        </div>
");
#nullable restore
#line 40 "C:\learning\hackaton\Views\Orders\GetChallangers.cshtml"
    }

#line default
#line hidden
#nullable disable
            WriteLiteral("</div>\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        function acceptSubscription(elem)
        {
            let request = new XMLHttpRequest();
            request.open(""POST"", ""/Orders/AcceptSubscript"");
            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            let body = ""id_user="" + elem.id + ""&id_order="" + elem.value;
            request.onreadystatechange = () => {
                if (request.readyState == 4 && request.status == 200) {
                    let response = JSON.parse(request.responseText);
                    if (response.accepted == ""true"") {
                        elem.innerHTML = ""Отклонить заявку"";
                    }
                    else
                    {
                        elem.innerHTML = ""Принять заявку""
                    }
                }
            }
            request.send(body);
        }
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<hackaton.Models.user>> Html { get; private set; }
    }
}
#pragma warning restore 1591
